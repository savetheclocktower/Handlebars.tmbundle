<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
	A Handlebars grammar that can be folded into another arbitrary grammar.
	
	We do it this way so that we can have Handlebars in (e.g.) Markdown files
	without including a redundant (and conflicting) HTML grammar. We also
	shouldnâ€™t presume that a Handlebars template will be rendering HTML.
		
	To add to (e.g.) Textile, create a  `Textile (Handlebars)` grammar, include
	`source.handlebars`, then include `text.html.textile` or what-have-you.
	</string>
	<key>fileTypes</key>
	<array/>
	<key>name</key>
	<string>Handlebars</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#handlebars-blocks</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#handlebars-inline</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>function-params</key>
		<dict>
			<key>comment</key>
			<string>match parameters inside handlebars block/inline functions</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\s</string>
					<key>end</key>
					<string>(?=\s|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>any identifier between two spaces (or a space and a closing brace)</string>
							<key>match</key>
							<string>(?&lt;=\s)[a-zA-Z0-9\.\/]+(?=\s|\})</string>
							<key>name</key>
							<string>variable.parameter.function.handlebars</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>([a-zA-Z0-9\.\/]+)(=)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.keyword.handlebars</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.parameter.function.keyword.handlebars</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>a keyword argument and its value</string>
							<key>end</key>
							<string>(?=\s|\})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string-single-quoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#string-double-quoted</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\s)</string>
							<key>comment</key>
							<string>any string between two spaces (or a space and a closing brace)</string>
							<key>end</key>
							<string>(?=\s|\})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string-single-quoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#string-double-quoted</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>handlebars-blocks</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>so that we can capture the case where the cursor is in the middle</string>
					<key>match</key>
					<string>(\{\{)(\}\})</string>
					<key>name</key>
					<string>meta.embedded.control.empty.handlebars</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(#(?i:with|each)\b)\s+([a-zA-Z\-\.\/]+)(?=\s|\})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.handlebars</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.assigned-class.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{#with foo} / {{#each foo}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.control.start.with.handlebars</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(\/(?i:with|each))(?=\}\})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{/with} / {{/each}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.control.end.with.handlebars</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(#(?i:if|unless)\b)\s+([\.A-Za-z0-9$_\s\/]+)(?:\b|(?=\}\}))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.handlebars</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{#if foo}} / {{#unless foo}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.control.start.conditional.handlebars</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)((?i:else)\b)(?=\}\})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.handlebars</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{#else}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.control.start.else.handlebars</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(\/(?i:if|unless)\b)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{/if}} / {{/unless}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.control.end.conditional.handlebars</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(\&gt;)\s+([A-Za-z]+)(?=\s|\})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.handlebars</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.include.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{&gt; someInclude}} / {{&gt; someInclude foo}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.output.include.handlebars</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-params</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(#[A-Za-z_]+\b)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline.any.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>
					{{#someBlockFunction arg1 arg2 arg3}}
					NOTE: THIS *MUST* GO BELOW OTHER BLOCKS (like if/unless)
					</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.function.block.start.handlebars</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-params</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)(\/[A-Za-z_]+)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline.any.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>
					{{/someBlockFunction}}
					NOTE: THIS *MUST* GO BELOW OTHER BLOCKS (like if/unless)
					</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.function.block.end.handlebars</string>
				</dict>
			</array>
		</dict>
		<key>handlebars-inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						(\{\{) # opening braces
						\s*    # optional space
						(?=    # look ahead to...
							[A-Za-z0-9_$\.\/]+ # any valid characters for a property...
							\s*  # optional space...
							\}\} # ...and closing braces
							     # (if thereâ€™s anything else in the lookahead, itâ€™s invalid)
						)
					</string>
					<key>comment</key>
					<string>{{SomeProperty}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>name</key>
					<string>meta.embedded.output.handlebars</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b[A-Za-z0-9_$\.\/]+\b</string>
							<key>name</key>
							<string>variable.handlebars</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{)([A-Za-z_]+)(?=\s|\})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline.any.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>{{someInlineFunction arg1 arg2 arg3}}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.output.function.inline.handlebars</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-params</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{\{!)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.handlebars</string>
						</dict>
					</dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.handlebars</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ordinary handlebars comments: {{! this is a comment }}</string>
					<key>end</key>
					<string>(\}\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.handlebars</string>
				</dict>
			</array>
		</dict>
		<key>string-double-quoted</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.html</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.html</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.html</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#embedded-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#entities</string>
				</dict>
			</array>
		</dict>
		<key>string-single-quoted</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.html</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.html</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.html</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#embedded-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#entities</string>
				</dict>
			</array>
		</dict>
		<key>tag-generic-attribute</key>
		<dict>
			<key>match</key>
			<string>\b([a-zA-Z\-:]+)</string>
			<key>name</key>
			<string>entity.other.attribute-name.html</string>
		</dict>
		<key>tag-id-attribute</key>
		<dict>
			<key>begin</key>
			<string>\b(id)\b\s*(=)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.id.html</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.key-value.html</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;='|")</string>
			<key>name</key>
			<string>meta.attribute-with-value.id.html</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.handlebars</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.toc-list.id.html</string>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.handlebars</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.html</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#embedded-code</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#entities</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.html</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.toc-list.id.html</string>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.html</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.html</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#embedded-code</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#entities</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.handlebars</string>
	<key>uuid</key>
	<string>8ADA23FD-CEB6-4F67-8E59-AC1436A9354C</string>
</dict>
</plist>
